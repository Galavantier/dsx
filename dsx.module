<?php
/**
 * @file dsx.module
 * The core of DSX: Drupal Syntax Extension.
 * Inspired by Facebooks' JSX and XHP projects,
 * The module takes XML/HTML strings and converts them into Drupal Render Arrays.
 * DSX supports XML namespaces,
 * 							the full Drupal form API,
 * 							and is extensible via dynamic hooks for custom XML tags,
 *        			Or via the more traditional hook_element_info().
 */

module_load_include('inc', 'dsx', 'dsx.maps');

/**
 * The main render function. Kicks off the DSX process.
 * This is the only function that should be called from user code directly.
 * It's main function is to parse the XML string into a Tree structure using simpleXML that is built into PHP.
 * @see: http://php.net/manual/en/class.simplexmlelement.php
 *
 * dsx_render then passes the tree structure into dsx_to_array,
 * a recursive visitor function that walks the tree and produces a Drupal render array.
 *
 * @param  string | array  $input  An XML formatted string, or an array of XML formatted strings.
 * @return array                   A drupal render array. @see: https://www.drupal.org/node/930760
 */
function dsx_render($input) {
  // If $input is an array
  if(is_array($input)) {
    return array_map(function($element) { return dsx_render($element); }, $input);
  }
  // simpleXML does not support HTML special chars, or the '&' character directly.
  // We convert to UTF-8 Decimal encoding, which simpleXML does understand.
  $input = dsx_convert_html_special_chars($input);

  // Tell simpleXML that we will handle errors ourselves. This lets us be a bit more flexible.
  libxml_use_internal_errors(TRUE);
  try {
    // Parse the input into an XML tree.
    $xml = new SimpleXMLElement($input);
  } catch (Exception $e) {
    foreach(libxml_get_errors() as $error) {
      switch($error->code) {
        case 5:
          // We are missing a parent tag. Add a temporary one, then remove it and pass along the children.
          // This allows our components to output arbitrary lists of tags without having a parent tag.
          $element = dsx_to_array(new SimpleXMLElement('<div temp-container="true">' . $input . '</div>'), dsx_strict_mode());
          return array_intersect_key($element, array_flip(element_children($element)));
        case 201:
          // We ignore 'undefined namespace' errors. There is no need to have to formally define a namespace with an xlnms attribute,
          // just start using the namespace.
          break;
        default:
        // Any other errors that we don't know how to handle, just spit out the screen.
        // @TODO: Do we want a watchdog error as well?
        drupal_set_message('DSX: Error code ' . $error->code . ', while attempting to parse input: ' . $input . $error->message, 'error');
        return "";
      }
    }
  }

  // Kick off the recursive function that walks the parsed tree to produce a Drupal render array.
  return dsx_to_array($xml, dsx_strict_mode());
}

/**
 * This function acts as a sticky switch that tells DSX if strict mode is on off.
 * The value of strict mode is sticky only for the duration of one script execution.
 * It defaults to TRUE.
 *
 * If you pass a value into this function, it changes the value of strict mode.
 * Otherwise, if you don't pass anything, it just returns the current value of strict mode.
 *
 * @param  boolean $strict (OPTIONAL) A new value for strict mode.
 * @return boolean         Either the current value of strict mode, or the new value for strict mode that was just set.
 */
function dsx_strict_mode($strict = NULL) {
  $strict_mode = &drupal_static(__FUNCTION__);
  if(!isset($strict_mode)) { $strict_mode = TRUE; }
  if(isset($strict)) { $strict_mode = $strict; }
  return $strict_mode;
}

/**
 * A recursive visitor function, that visits each node of a simpleXML tree structure,
 * and produces a (hopefully) valid Drupal render array.
 *
 * @param SimpleXMLElement  $xml      The Current XML node we are visiting.
 * @param boolean           $strict   [description]
 * @param array             $arr      (OPTIONAL) The Starting state for the Drupal render array. (Normally always an empty array)
 * @return array                      A complete Drupal render array for this node, including the correctly nested render arrays of all child nodes.
 */
function dsx_to_array($xml, $strict = true, $arr = array()) {
    $std_tags = dsx_std_html_tags();
    // We handle XML namespaces internally.
    $tag = dsx_parse_qualified_name($xml->getName());

    // If this node has a namespace, we use element_info() to attempt to find the Drupal form api info for the tag.
    $drupal_element_info = array();
    if ($tag->namespace == "drupal") {
      // If the namespace is drupal, we just feed the tag in to element_info. This gives us Drupal form api element support.
      $drupal_element_info = element_info($tag->name);
    } else if( $tag->namespace != "global" ) {
      // If the namespace is custom, we pass both the namespace and the tag into element_info.
      $drupal_element_info = element_info($tag->namespace . "_" . str_replace("-", "_", $tag->name));
    }

    // If the node's tag name is a standard HTML tag, or we were able to get something useful out of element_info(), just convert the node to a render array directly.
    // otherwise, try to find a custom render function for this node.
    if(sizeof($drupal_element_info) > 0 || in_array($tag->name, $std_tags)) {
      $arr = dsx_component_to_drupal_render_array($tag, $xml, $drupal_element_info);
    } else {
      // The hook name is 'HOOK_<tag_name>_component'.
      // If the node has a namespace, the hook name becomes 'HOOK_<namespace>_<tag_name>_component'.
      $hook = str_replace("-", "_", $tag->name) . '_component';
      if($tag->namespace != "global") { $hook = $tag->namespace . "_" . $hook; }

      // Do any modules implement this hook?
      $modules = module_implements($hook);

      // module_implements does not check inside themes, so we check the active theme ourselves.
      global $theme_key;
      if(function_exists($theme_key . "_" . $hook)) { array_push($modules, $theme_key); }

      // Check for errors. There must be exactly one render function. no more, no less.
      if(sizeof($modules) < 1) {
        if($strict) {
          throw new Exception("DSX: the tag " . $xml->getName() . " must have a render function defined. The format is HOOK_" . $hook);
        } else  {
          // If we are not in strict mode and there are no render functions for this component,
          // just render the tag as it is.
          $arr = dsx_component_to_drupal_render_array($tag, $xml);
        }
      } else if(sizeof($modules) > 1) {
        throw new Exception("DSX: the tag " . $xml->getName() . " must only have one render function defined." .
                            " The following modules have competing render functions: " . implode(', ', $modules));
      } else {
        // Call the render function for the custom component
        $function = $modules[0] . '_' . $hook;
        if (function_exists($function)) {
          $props = array();
          foreach($xml->attributes() as $attr => $val) {
              $props[$attr] = filter_xss(check_plain((string)$val));
          }
          // This is going to be a recurisve call 99.9% of the time.
          $arr = call_user_func_array(dsx_detect_infinite_recursion($function), array('props' => $props, 'value' => filter_xss(check_plain((string)$xml)) ));
        } else {
          throw new Exception("DSX: the render function for the tag " . $tag->name . " is not defined.");
        }
      }
    }

    // Recursively convert all of the children nodes into render arrays.
    $children = array();
    foreach($xml->children() as $child) {
      $rendered_child = dsx_to_array($child, $strict);
      if(isset($child->attributes()->{'name'})) {
        if(strpos((string)$child->attributes()->{'name'}, '#') === 0) {
          throw new Exception('DSX: Error in ' . $child->getName() . ' tag with name attribute: "' . (string)$child->attributes()->{'name'} . '". The name attribute cannot start with a # because Drupal Render Arrays treat array keys that start with # as special attributes.');
        }
        // If this is a named child, we use the name as they key in the parent array.
        if(isset($children[(string)$child->attributes()->{'name'}])) {
          // If the child key already exists, make it into an array of named children.
          if(!is_array($children[(string)$child->attributes()->{'name'}])) {
            $rendered_child[(string)$child->attributes()->{'name'}] = array( $rendered_child[(string)$child->attributes()->{'name'}] );
          }
          $children[(string)$child->attributes()->{'name'}][] = $rendered_child;
        } else {
          $children[(string)$child->attributes()->{'name'}] = $rendered_child;
        }
      } else {
        // This child doesn't have a name, just push it to the end of the parent array.
        $children[] = $rendered_child;
      }
    }

    // Since deep embed is determined inside a render function, a tag does not know that it is a deep embed until the final resulting render array is returned,
    // Custom tags do not know their own final structure, until they are finished rendering.
    // We determine if a tag is a deep embed point, if it's custom tag does not have the deep embed attribute, but the finished render array does have the deep embed attribute.
    $is_deep_embed_parent = (!isset($xml->attributes()->{'dsx-deep-embed'}) && isset($arr['#attributes']['dsx-deep-embed']));
    $arr = dsx_insert_children($arr, $children,  $is_deep_embed_parent);
    // We have to unset the deep embed attribute, so that it does not propogate up to any render functions higher in the tree, causing deep embed to run twice.
    if($is_deep_embed_parent) { unset($arr['#attributes']['dsx-deep-embed']); }

    // If this is node a named tag, use the name as the key for the final render array of the node.
    // This is used up above in the child render loop for properly nesting child elements.
    if(isset($xml->attributes()->{'name'})) {
      return array( (string)$xml->attributes()->{'name'} => $arr);
    } else {
      return $arr;
    }
};

/**
 * Properly nests child render arrays into a parent render array.
 * If necessary, we recursivlely push the children array to the bottom of a chain of nested render arrays. (For deep embed points)
 * @param  array    $parent       The drupal render array that we are inserting children into.
 * @param  array    $children     An array of drupal render arrays that represent the child nodes that we want to nest.
 * @param  boolean  $bubble_down  Are we bubbling down, or just directly nesting the child arrays.
 * @return array                  The $parent parent render array with all of the $children render arrays properly nested inside.
 */
function dsx_insert_children($parent, $children, $bubble_down = false) {
  if($bubble_down) {
    // We have to bubble down, so get any children that are already attached to the $parent.
    $cur_children = element_children($parent);
    if(sizeof($cur_children) > 1) {
      // We must have only one clear path in the tree to recurse down.
      throw new Exception("DSX: A component can only have one child for deep embedding of children: " . var_export($parent, TRUE));
    } else if(sizeof($cur_children) < 1) {
      // The base case. If there are no children, we are at a leaf node, and we can just insert the children here.
      return array_merge($parent, $children);
    } else {
      // There is a child, so we have to keep moving down the tree.
      $parent[$cur_children[0]] = dsx_insert_children($parent[$cur_children[0]], $children, $bubble_down);
      return $parent;
    }
  } else {
    // The simple case with no bubbling, just merge the parent and children arrays.
    // @TODO: I would like to figure out how to merge this logic with the base case of the recursive mode above.
    return array_merge($parent, $children);
  }
}

/**
 * Convert a simpleXML node into a drupal render array.
 * This is the actual 'render' function that takes the xml node and produces a render array from it.
 * @param  stdClass           $tag            An object containing the namespace and tag name for a node. Obtained from: dsx_parse_qualified_name()
 * @param  simpleXMLElement   $xml            The XML node we are attempting to render.
 * @param  array              $element_info   (OPTIONAL) the element info array obtained from a call to element_info() from Drupal core.
 * @return array                              A valid Drupal render array representing the XML node.
 */
function dsx_component_to_drupal_render_array($tag, $xml, $element_info = array()) {
  // Assume the node is going to be rendered as a html_tag type by default.
  $arr = array('#type' => 'html_tag', '#attributes' => array() );
  if(sizeof($element_info) < 1) {
    $arr['#tag'] = $tag->name;
    $arr['#value'] = filter_xss(check_plain((string)$xml));

    // All attributes of a 'html_tag' node become part of the '#attributes' key of the render array.
    foreach($xml->attributes() as $attr => $val) {
        if ( $attr == 'class' ) {
          // Class is a special case, because it needs to be exploded into a sub-array of class names.
          $filtered_val = (string)$val;
          $arr['#attributes'][$attr] = explode(' ', $filtered_val);
        } else {
          $arr['#attributes'][$attr] = (string)$val;
        }
    }
  } else {
    // We have some element info, use that instead of 'html_tag'.
    $arr['#type'] = $element_info['#type'];
    $val = filter_xss(check_plain(trim((string)$xml)));
    // If we have any plain-text embedded in the xml node, that becomes the '#value' key in the array.
    if(strlen($val) > 0) {
      $arr['#value'] = $val;
    }

    foreach($xml->attributes() as $attr => $val) {
      if($attr == 'attributes') {
        // If the the xml node has an explicit 'attributes' attribute set, interperate the value as a json encoded string and place the parsed result in the '#attributes' key of the array.
        $arr['#attributes'] = array_merge($arr['#attributes'], json_decode(str_replace("'", '"',(string)$val), true));
      }else if ( $attr == 'class' ) {
        //Class is treated as the HTML class attribute, like id and enctype below, but class is a special case, because it needs to be exploded into a sub-array of class names.
        $filtered_val = (string)$val;
        $arr['#attributes'][$attr] = explode(' ', $filtered_val);
      } else if(in_array($attr, array('id', 'enctype', 'lang')) || strpos($attr, 'on') !== FALSE) {
        // Certain attributes are so commonly used in HTML, that it makes sense to pass them directly into the HTMl '#attributes' key of the array.
        $filtered_val = (string)$val;
        $arr['#attributes'][$attr] = $filtered_val;
      } else {
        // Any other arbitrary attributes of the xml node are passed directly into the resulting render array with the '#' prepended to it (the Drupal render array convention for attributes).
        $filtered_val = (string)$val;
        $arr['#' . $attr] = $filtered_val;
      }
    }
  }

  return $arr;
}

/**
 * Implements hook_html_tag().
 * A minor `hack` to allow html_tag render array elements to have children attached.
 */
function dsx_preprocess_html_tag(&$variables) {
  // Loop over element children, render them, and add them to the #value string.
  foreach (element_children($variables['element']) as $key) {
    if ($variables['element']['#value'] === NULL) {
      // Set this to string to avoid E_NOTICE error when concatenating to NULL.
      $variables['element']['#value'] = '';
    }
    // Concatenate the rendered child onto the element #value.
    $variables['element']['#value'] .= drupal_render($variables['element'][$key]);
  }
}

/**
 * Takes an XML tag name, possibly with a namespace, designated by the ':' character, and produce a stdClass object containing the namespace and tag name.
 * No namespace is considered to be in the namespace "global".
 * @param  string     $tagName the string containing the tag name. Format: <tag_name> or <namespace>:<tag_name>
 * @return stdClass            stdClass with two properties: namespace, name.
 */
function dsx_parse_qualified_name($tagName) {
  $parts = explode(":", $tagName);
  $tag = new stdClass();

  if(sizeof($parts) < 1) {
    throw new Exception("DSX: Unable to parse tag name: " . $tagName);
  }
  if(sizeof($parts) < 2) {
    $tag->namespace = "global";
    $tag->name = $parts[0];
  } else {
    $tag->namespace = $parts[0];
    $tag->name = $parts[1];
  }
  return $tag;
}

/**
 * Detect if we are about to enter an infinite recursion.
 * This works by detecting if we are about to call a render function inside itself,
 * even if the call to itself is nested inside a sub-render-function.
 * In Computer Science speak we are checking for cycles in the call stack.
 *
 * This function relies the PHP debug_stacktrace function, which lets us examine the current call stack.
 * @see http://php.net/manual/en/function.debug-backtrace.php
 *
 * @param  string $function             The function name about to be called.
 * @return string | Exception           Either returns the function name, or throws an Exception.
 */
function dsx_detect_infinite_recursion($function) {
  // We only care about the function names.
  $stack_trace = array_map(function($stack_frame) { return $stack_frame['function']; }, debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));

  // Is this function name already on the stack? If so, we have a cycle.
  $cycles = array_filter($stack_trace, function($stack_frame) use ($function) { return $stack_frame == $function; });
  if(sizeof($cycles) > 0) {
    // PHP gives us the stack with the last called function first, but it is more useful for debugging to see the stack in reverse order; first function called first.
    $stack_trace = array_reverse($stack_trace);
    // We add the function that was about to be called to the end of the stack trace, so that the cycle is obviously visible.
    $stack_trace[] = $function;

    // For debugging, We only care about DSX render functions, which all end in "_component". All other function calls are just noise.
    $render_functions_stack_trace = array_filter($stack_trace, function($stack_frame){ return strpos($stack_frame, '_component') !== FALSE; });
    throw new Exception("DSX: Infinite recursion detected. The following render function was called inside itself: " . $function
    . ".\t Stack Trace: " . implode(" -> ", $render_functions_stack_trace));
  }
  return $function;
}

/**
 * simpleXML does not support HTML named special character encoding, or the '&' character.
 * It only supports UTF-8 Decimal form of special character encoding.
 * I.E. &nbsp; will error, but &#160; works fine.
 * Surpisingly, a converter for HTML named entity to UTF-8 is not built into php.
 * PHP htmlspecialchars() or drupal check_plain() will not work because those functions will try to convert the
 * HTML tags as well.
 */
function dsx_convert_html_special_chars($input) {
  $entity_map = dsx_html_entity_map();
  $html_entities = array_keys($entity_map);
  $utf_entities = array_values($entity_map);
  $output = str_replace($html_entities, $utf_entities, $input);
  //Convert regular '&' character into the special char entity form.
  $output = preg_replace('/&(?!#[0-9]+;)/', '&#38;', $output);
  return $output;
}
